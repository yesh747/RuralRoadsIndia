# forward
reg.best <- regsubsets(LOW ~ ., data=df, method="forward")
plot(reg.best)
# seqrep
reg.best <- regsubsets(LOW ~ ., data=df, method="seqrep")
plot(reg.best)
# exhaustive
reg.best <- regsubsets(LOW ~ ., data=df, method="exhaustive")
plot(reg.best)
# move "y" (i.e. LOW) to the last column
temp <- df$LOW
df$LOW <- NULL
df$LOW <- temp
rm(temp)
# backward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="backward")
plot(reg.best)
# forward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="forward")
plot(reg.best)
# seqrep
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="seqrep")
plot(reg.best)
# exhaustive
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="exhaustive")
plot(reg.best)
stargazer(logres$BestModel, type="text")
# convert binomials to numeric
df[, factor] <- lapply(df[, factor], as.numeric)
# drop categorical variables that cannot be used in PCR
df$RACE <- NULL
set.seed(1000)
df_sample <- sample(2, nrow(df), replace=TRUE, prob=c(.67, .33))
df_train <-  df[df_sample ==1,]
df_test <- df[df_sample==2,]
pcr.low <- pcr(LOW ~ ., data=df_train, scale=TRUE, validation="CV")
summary(pcr.low)
validationplot(pcr.low ,val.type="MSEP")
validationplot(pcr.low ,val.type="R2")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gdata)
library(stargazer)
library(leaps)
library(bestglm)
library(stats)
library(pls)
df <- read.xls('lowbwt.xls')
df$ID <- NULL # drop ID which is not informative for our analysis
df$BWT <- NULL # drop birthweight because birthweight will obsiously be highly correlated to whether the baby is underweight
#convert the following to factor variables
factor <- c('RACE', 'SMOKE', 'HT', 'UI')
df[, factor] <- lapply(df[, factor], as.factor)
str(df)
sum(is.na(df)) # no missing values
stargazer(df, type="text")
# backward
reg.best <- regsubsets(LOW ~ ., data=df, method="backward")
plot(reg.best)
# forward
reg.best <- regsubsets(LOW ~ ., data=df, method="forward")
plot(reg.best)
# seqrep
reg.best <- regsubsets(LOW ~ ., data=df, method="seqrep")
plot(reg.best)
# exhaustive
reg.best <- regsubsets(LOW ~ ., data=df, method="exhaustive")
plot(reg.best)
# move "y" (i.e. LOW) to the last column
temp <- df$LOW
df$LOW <- NULL
df$LOW <- temp
rm(temp)
# backward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="backward")
plot(reg.best)
# forward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="forward")
plot(reg.best)
# seqrep
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="seqrep")
plot(reg.best)
# exhaustive
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="exhaustive")
plot(reg.best)
stargazer(logres$BestModel, type="text")
# convert binomials to numeric
df[, factor] <- lapply(df[, factor], as.numeric)
# drop categorical variables that cannot be used in PCR
df$RACE <- NULL
set.seed(1000)
df_sample <- sample(2, nrow(df), replace=TRUE, prob=c(.67, .33))
df_train <-  df[df_sample ==1,]
df_test <- df[df_sample==2,]
pcr.low <- pcr(LOW ~ ., data=df_train, scale=TRUE, validation="CV")
summary(pcr.low)
validationplot(pcr.low ,val.type="MSEP")
validationplot(pcr.low ,val.type="R2")
Hitters[223:322, 2]
Hitters[223:322,-2]
Hitters[223:322, 2]
Hitters[223:322,-2]
Hitters[223:322,-2]
Hitters[223:322,2]
Hitters[223:322,-2]
Hitters[223:322,1]
Hitters[223:322,-1]
pcr_pred <- predict(pcr.fit, df_test, ncomp=2)
pcr_pred <- predict(pcr.low, df_test, ncomp=2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gdata)
library(stargazer)
library(leaps)
library(bestglm)
library(stats)
library(pls)
df <- read.xls('lowbwt.xls')
df$ID <- NULL # drop ID which is not informative for our analysis
df$BWT <- NULL # drop birthweight because birthweight will obsiously be highly correlated to whether the baby is underweight
#convert the following to factor variables
factor <- c('RACE', 'SMOKE', 'HT', 'UI')
df[, factor] <- lapply(df[, factor], as.factor)
str(df)
sum(is.na(df)) # no missing values
stargazer(df, type="text")
# backward
reg.best <- regsubsets(LOW ~ ., data=df, method="backward")
plot(reg.best)
# forward
reg.best <- regsubsets(LOW ~ ., data=df, method="forward")
plot(reg.best)
# seqrep
reg.best <- regsubsets(LOW ~ ., data=df, method="seqrep")
plot(reg.best)
# exhaustive
reg.best <- regsubsets(LOW ~ ., data=df, method="exhaustive")
plot(reg.best)
# move "y" (i.e. LOW) to the last column
temp <- df$LOW
df$LOW <- NULL
df$LOW <- temp
rm(temp)
# backward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="backward")
plot(reg.best)
# forward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="forward")
plot(reg.best)
# seqrep
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="seqrep")
plot(reg.best)
# exhaustive
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="exhaustive")
plot(reg.best)
stargazer(logres$BestModel, type="text")
# convert binomials to numeric
df[, factor] <- lapply(df[, factor], as.numeric)
# drop categorical variables that cannot be used in PCR
df$RACE <- NULL
set.seed(1000)
df_sample <- sample(2, nrow(df), replace=TRUE, prob=c(.67, .33))
df_train <-  df[df_sample ==1,]
df_test <- df[df_sample==2,]
pcr.low <- pcr(LOW ~ ., data=df_train, scale=TRUE, validation="CV")
summary(pcr.low)
validationplot(pcr.low ,val.type="MSEP")
validationplot(pcr.low ,val.type="R2")
pcr_pred <- predict(pcr.low, df_test, ncomp=2)
df_predict <- data.frame(pcr_pred, df_test[,2])
df_predict
df_predict1 <- mice(df_predict,m=5,maxit = 50, method = "pmm")
summary(df_predict)
df_predict <- data.frame(pcr_pred, df_test$LO)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict$LOW.2.comps-df_predict$df_test.LOW)^2)
LOW_RMSE <- sqrt(LOW_MSE)
summary(LOW_RMSE)
LOW_RMSE
LOW_RMSE
LOW_RMSE
pcr_pred <- predict(pcr.low, df_test, ncomp=4)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict$LOW.2.comps-df_predict$df_test.LOW)^2)
LOW_RMSE <- sqrt(LOW_MSE)
LOW_RMSE
pcr_pred <- predict(pcr.low, df_test, ncomp=3)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict$LOW.2.comps-df_predict$df_test.LOW)^2)
LOW_RMSE <- sqrt(LOW_MSE)
LOW_RMSE
pcr_pred <- predict(pcr.low, df_test, ncomp=2)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict$LOW.2.comps-df_predict$df_test.LOW)^2)
LOW_RMSE <- sqrt(LOW_MSE)
LOW_RMSE
pcr_pred <- predict(pcr.low, df_test, ncomp=3)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict$LOW.2.comps-df_predict$df_test.LOW)^2)
LOW_RMSE <- sqrt(LOW_MSE)
LOW_RMSE
pcr_pred <- predict(pcr.low, df_test, ncomp=1)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict$LOW.2.comps-df_predict$df_test.LOW)^2)
LOW_RMSE <- sqrt(LOW_MSE)
LOW_RMSE
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gdata)
library(stargazer)
library(leaps)
library(bestglm)
library(stats)
library(pls)
df <- read.xls('lowbwt.xls')
df$ID <- NULL # drop ID which is not informative for our analysis
df$BWT <- NULL # drop birthweight because birthweight will obsiously be highly correlated to whether the baby is underweight
#convert the following to factor variables
factor <- c('RACE', 'SMOKE', 'HT', 'UI')
df[, factor] <- lapply(df[, factor], as.factor)
str(df)
sum(is.na(df)) # no missing values
stargazer(df, type="text")
# backward
reg.best <- regsubsets(LOW ~ ., data=df, method="backward")
plot(reg.best)
# forward
reg.best <- regsubsets(LOW ~ ., data=df, method="forward")
plot(reg.best)
# seqrep
reg.best <- regsubsets(LOW ~ ., data=df, method="seqrep")
plot(reg.best)
# exhaustive
reg.best <- regsubsets(LOW ~ ., data=df, method="exhaustive")
plot(reg.best)
# move "y" (i.e. LOW) to the last column
temp <- df$LOW
df$LOW <- NULL
df$LOW <- temp
rm(temp)
# backward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="backward")
plot(reg.best)
# forward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="forward")
plot(reg.best)
# seqrep
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="seqrep")
plot(reg.best)
# exhaustive
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="exhaustive")
plot(reg.best)
stargazer(logres$BestModel, type="text")
# convert binomials to numeric
df[, factor] <- lapply(df[, factor], as.numeric)
# drop categorical variables that cannot be used in PCR
df$RACE <- NULL
set.seed(1000)
df_sample <- sample(2, nrow(df), replace=TRUE, prob=c(.67, .33))
df_train <-  df[df_sample ==1,]
df_test <- df[df_sample==2,]
pcr.low <- pcr(LOW ~ ., data=df_train, scale=TRUE, validation="CV")
summary(pcr.low)
validationplot(pcr.low ,val.type="MSEP")
validationplot(pcr.low ,val.type="R2")
pcr_pred <- predict(pcr.low, df_test, ncomp=3)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict$LOW.2.comps-df_predict$df_test.LOW)^2)
LOW_RMSE <- sqrt(LOW_MSE)
f_predict$LOW.2.comp
df_predict$LOW.2.comps
pcr_pred <- predict(pcr.low, df_test, ncomp=3)
pcr_pred
LOW_MSE <- mean((df_predict[,1]-df_predict[,2])^2)
LOW_RMSE <- sqrt(LOW_MSE)
LOW_RMSE
pcr_pred <- predict(pcr.low, df_test, ncomp=3)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict[,1]-df_predict[,2])^2)
LOW_RMSE <- sqrt(LOW_MSE)
pcr_pred <- predict(pcr.low, df_test, ncomp=8)
pcr_pred <- predict(pcr.low, df_test, ncomp=7)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict[,1]-df_predict[,2])^2)
LOW_RMSE <- sqrt(LOW_MSE)
pcr_pred <- predict(pcr.low, df_test, ncomp=1)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict[,1]-df_predict[,2])^2)
LOW_RMSE <- sqrt(LOW_MSE)
pcr_pred <- predict(pcr.low, df_test, ncomp=3)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict[,1]-df_predict[,2])^2)
LOW_RMSE <- sqrt(LOW_MSE)
pcr_pred <- predict(pcr.low, df_test, ncomp=5)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict[,1]-df_predict[,2])^2)
LOW_RMSE <- sqrt(LOW_MSE)
pcr_pred <- predict(pcr.low, df_test, ncomp=2)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict[,1]-df_predict[,2])^2)
LOW_RMSE <- sqrt(LOW_MSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gdata)
library(stargazer)
library(leaps)
library(bestglm)
library(stats)
library(pls)
df <- read.xls('lowbwt.xls')
df$ID <- NULL # drop ID which is not informative for our analysis
df$BWT <- NULL # drop birthweight because birthweight will obsiously be highly correlated to whether the baby is underweight
#convert the following to factor variables
# factor <- c('RACE', 'SMOKE', 'HT', 'UI')
# df[, factor] <- lapply(df[, factor], as.factor)
str(df)
sum(is.na(df)) # no missing values
stargazer(df, type="text")
# backward
reg.best <- regsubsets(LOW ~ ., data=df, method="backward")
plot(reg.best)
# forward
reg.best <- regsubsets(LOW ~ ., data=df, method="forward")
plot(reg.best)
# seqrep
reg.best <- regsubsets(LOW ~ ., data=df, method="seqrep")
plot(reg.best)
# exhaustive
reg.best <- regsubsets(LOW ~ ., data=df, method="exhaustive")
plot(reg.best)
# move "y" (i.e. LOW) to the last column
temp <- df$LOW
df$LOW <- NULL
df$LOW <- temp
rm(temp)
# backward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="backward")
plot(reg.best)
# forward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="forward")
plot(reg.best)
# seqrep
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="seqrep")
plot(reg.best)
# exhaustive
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="exhaustive")
plot(reg.best)
stargazer(logres$BestModel, type="text")
# convert binomials to numeric
df[, factor] <- lapply(df[, factor], as.numeric)
# drop categorical variables that cannot be used in PCR
df$RACE <- NULL
set.seed(1000)
df_sample <- sample(2, nrow(df), replace=TRUE, prob=c(.67, .33))
df_train <-  df[df_sample ==1,]
df_test <- df[df_sample==2,]
pcr.low <- pcr(LOW ~ ., data=df_train, scale=TRUE, validation="CV")
summary(pcr.low)
validationplot(pcr.low ,val.type="MSEP")
validationplot(pcr.low ,val.type="R2")
pcr_pred <- predict(pcr.low, df_test, ncomp=2)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict[,1]-df_predict[,2])^2)
LOW_RMSE <- sqrt(LOW_MSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gdata)
library(stargazer)
library(leaps)
library(bestglm)
library(stats)
library(pls)
df <- read.xls('lowbwt.xls')
df$ID <- NULL # drop ID which is not informative for our analysis
df$BWT <- NULL # drop birthweight because birthweight will obsiously be highly correlated to whether the baby is underweight
#convert the following to factor variables
factor <- c('RACE', 'SMOKE', 'HT', 'UI')
df[, factor] <- lapply(df[, factor], as.factor)
str(df)
sum(is.na(df)) # no missing values
stargazer(df, type="text")
# backward
reg.best <- regsubsets(LOW ~ ., data=df, method="backward")
plot(reg.best)
# forward
reg.best <- regsubsets(LOW ~ ., data=df, method="forward")
plot(reg.best)
# seqrep
reg.best <- regsubsets(LOW ~ ., data=df, method="seqrep")
plot(reg.best)
# exhaustive
reg.best <- regsubsets(LOW ~ ., data=df, method="exhaustive")
plot(reg.best)
# move "y" (i.e. LOW) to the last column
temp <- df$LOW
df$LOW <- NULL
df$LOW <- temp
rm(temp)
# backward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="backward")
plot(reg.best)
# forward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="forward")
plot(reg.best)
# seqrep
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="seqrep")
plot(reg.best)
# exhaustive
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="exhaustive")
plot(reg.best)
stargazer(logres$BestModel, type="text")
# convert binomials to numeric
df[, factor] <- lapply(df[, factor], as.numeric)
# drop categorical variables that cannot be used in PCR
df$RACE <- NULL
set.seed(1000)
df_sample <- sample(2, nrow(df), replace=TRUE, prob=c(.67, .33))
df_train <-  df[df_sample ==1,]
df_test <- df[df_sample==2,]
pcr.low <- pcr(LOW ~ ., data=df_train, scale=TRUE, validation="CV")
summary(pcr.low)
validationplot(pcr.low ,val.type="MSEP")
validationplot(pcr.low ,val.type="R2")
pcr_pred <- predict(pcr.low, df_test, ncomp=2)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict[,1]-df_predict[,2])^2)
LOW_RMSE <- sqrt(LOW_MSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gdata)
library(stargazer)
library(leaps)
library(bestglm)
library(stats)
library(pls)
df <- read.xls('lowbwt.xls')
df$ID <- NULL # drop ID which is not informative for our analysis
df$BWT <- NULL # drop birthweight because birthweight will obsiously be highly correlated to whether the baby is underweight
#convert the following to factor variables
factor <- c('RACE', 'SMOKE', 'HT', 'UI')
df[, factor] <- lapply(df[, factor], as.factor)
str(df)
sum(is.na(df)) # no missing values
stargazer(df, type="text")
# backward
reg.best <- regsubsets(LOW ~ ., data=df, method="backward")
plot(reg.best)
# forward
reg.best <- regsubsets(LOW ~ ., data=df, method="forward")
plot(reg.best)
# seqrep
reg.best <- regsubsets(LOW ~ ., data=df, method="seqrep")
plot(reg.best)
# exhaustive
reg.best <- regsubsets(LOW ~ ., data=df, method="exhaustive")
plot(reg.best)
# move "y" (i.e. LOW) to the last column
temp <- df$LOW
df$LOW <- NULL
df$LOW <- temp
rm(temp)
# backward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="backward")
plot(reg.best)
# forward
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="forward")
plot(reg.best)
# seqrep
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="seqrep")
plot(reg.best)
# exhaustive
logres <- bestglm(Xy=df, family=binomial, IC="BIC", method="exhaustive")
plot(reg.best)
stargazer(logres$BestModel, type="text")
# convert binomials to numeric
df[, factor] <- lapply(df[, factor], as.numeric)
# drop categorical variables that cannot be used in PCR
df$RACE <- NULL
set.seed(1000)
df_sample <- sample(2, nrow(df), replace=TRUE, prob=c(.67, .33))
df_train <-  df[df_sample ==1,]
df_test <- df[df_sample==2,]
pcr.low <- pcr(LOW ~ ., data=df_train, scale=TRUE, validation="CV")
summary(pcr.low)
validationplot(pcr.low ,val.type="MSEP")
validationplot(pcr.low ,val.type="R2")
pcr_pred <- predict(pcr.low, df_test, ncomp=2)
df_predict <- data.frame(pcr_pred, df_test$LOW)
summary(df_predict)
LOW_MSE <- mean((df_predict[,1]-df_predict[,2])^2)
LOW_RMSE <- sqrt(LOW_MSE)
R.Version()
R.Version()
install.packages("installr")
updateR()
library(installr)
R.Version()
